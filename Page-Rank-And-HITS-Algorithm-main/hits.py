import networkx as nx
import numpy as np

'''Hyperlink Induced Topic Search (HITS) Algorithm is a Link Analysis Algorithm that rates webpages, developed by Jon Kleinberg. 
This algorithm is used to the web link-structures to discover and rank the webpages relevant for a particular search. '''

#Read graph object in Python pickle format.
web_graph=nx.read_gpickle("web_graph.gpickle")
print(web_graph)

#Reading all the queries
query = input('Enter your query:')
query = query.split()

'''In the HITS algorithm, we retrieve the most relevant pages to the search query. 
This set is called the root set and can be obtained by taking the top pages returned by a text-based search algorithm.'''
arr = np.zeros(100)

for i in range(0,100) :
    document = web_graph.nodes[i]['page_content']
    temp=document.split()

    for q in query:
        if q in temp:
            arr[i]=1
            break
arr=np.array(arr)

#create adjacency matrix arr1
adj=nx.to_numpy_array(web_graph)

'''A hub value is the sum of the scaled authority values of the pages it points to.'''
#Getting Hub score
hub=np.dot(arr,adj)

'''An authority value is computed as the sum of the scaled hub values that point to that page.'''
#Getting authority score
authority=np.dot(arr,adj.T)

#Finding which all pages involved in hub-authority relationship for the given query and are to be a part of the sub-graph
arr=arr+hub+authority

'''A base set is generated by augmenting the root set with all the web pages that are linked from it and some of the pages that link to it. 
Reason for constructing a base set is to ensure that many of the strongest authorities are included.'''
#create the baseset
connection=[]

for i in range (0,100):
    if(arr[i]!=0):
        #add i to a vector arr5
        connection.append(i)

'''The web pages in the base set and all hyperlinks among those pages form a focused subgraph. The HITS computation is performed only on this focused subgraph.'''
#create a subgraph using baseset
subgraph=nx.subgraph(web_graph, connection)
result=nx.to_numpy_array(subgraph)

'''Start with each node having a hub score and authority score of 1.'''
length = len(connection)
hubvector=np.ones(length)
authorityvector=np.ones(length)

'''Authority update: Update each node's authority score to be equal to the sum of the hub scores of each node that points to it.''' 

'''Hub update: Update each node's hub score to be equal to the sum of the authority scores of each node that it points to.'''

'''Normalize the values by dividing each Hub score by sum of all Hub scores, and dividing each Authority score by sum of all Authority scores.'''

'''Repeat these steps by setting good number of iterations'''

# Setting no. of iterations
iteration=1000
step=0
while(step<=1000):
    step=step+1
    #Run the authority update rule
    authorityvector=np.dot(result.T,hubvector)
    
    # Run the hub update rule
    hubvector=np.dot(result,authorityvector)

    # Normalize the values by dividing each Hub score by square root of the sum of the squares of all Hub scores, 
    # and dividing each Authority score by square root of the sum of the squares of all Authority scores.
    hubvector=hubvector/sum(hubvector)
    authorityvector=authorityvector/sum(authorityvector)

'''Result contains all the nodes involved in the subgraph. 
Hubvector contains the hubscores and authorityvector contains the authorityscores of those respective nodes'''
result=list(subgraph.nodes)

print("\nNode\tHub Values:")
step=0
for value in hubvector:
    print(result[step],end="\t")
    print(value,end="\n")
    step=step+1

print("\nNode\tAuthority Values:")
step=0
for value in authorityvector:
    print(result[step],end="\t")
    print(value,end="\n")
    step=step+1
